#!/usr/bin/env node

const program = require('commander');//命令行
const inquirer = require('inquirer');//命令行问句
const chalk = require('chalk');//命令行加颜色
const fs = require('fs');
const path = require('path');
const cons = require('consolidate');
const _ = require('underscore');
console.log();

program.parse(process.argv);

let indexTemplate = 'import React , {Component} from "react";\n\
import {connect} from "dva";\n\
import { Router,hashHistory,browserHistory} from "dva/router";\n\
class <%name%> extends Component{\n\
  render(){\n\
    var self=this;\n\
    return(\n\
        <div className="<%name%>">\n\
        	<%name%>\n\
        </div>\n\
      );\n\
  }\n\
}\n\
\n\
export default connect((state)=>{return state})(<%name%>);\n\
';

let routerTemplate = 'const registerModel = (app, model)=>{\n\
  if (!(app._models.filter(m => m.namespace === model.namespace).length === 1)) {\n\
    app.model(model)\n\
  }\n\
}\n\
module.exports = {\n\
	path: "<%name%>",\n\
	indexRoute: {\n\
		onEnter(){\n\
		},\n\
		getComponent(nextState, cb) {\n\
			require.ensure([], (require) => {\n\
				let model = require("../models/<%name%>")["default"];\n\
				registerModel(app,model);\n\
				cb(null, require("../chunk/<%name%>/Index")["default"]);\n\
			}, "chunk/<%name%>/Index")\n\
		}\n\
	},\n\
	getChildRoutes(partialNextState, cb) {\n\
    require.ensure([], (require) => {cb(null,[])})\n\
  }\n\
}'
let modelTemplate = 'import request from "../utils/request";\nexport default {\n\
	namespace: "<%name%>",\n\
	state: {\n\
		loading: false,\n\
		fix:false,\n\
		data:[]\n\
	},\n\
	reducers: {\n\
		changeData(state,action){\n\
      return { ...state, ...action.payload };\n\
    }\n\
	},\n\
	effects: {\n\
	},\n\
	subscriptions: {\n\
	},\n\
};'
let servicesTemplate = "import request from '../utils/request';"

let project = [
	{
		type: 'input',
		name: 'parent',
		message: '是否有父模块（首字母大写）（无则留空）:'
	}
]

function create(name, parentName){
	fs.exists(process.cwd() + '/src/scripts/routes/' +name + '.js', function (exists) {
		if (exists) {
			console.log();
			console.log(chalk.red('# ***********************'));
			console.log();
			console.log(chalk.red('  ERROR：模块【'+name+'】已存在!'));
			console.log();
			console.log(chalk.red('# ***********************'));
			console.log();
			return
		} else {
			fs.mkdir(process.cwd() + '/src/scripts/chunk/' + name,(err)=>{
				if(err){
					console.error(err);	
					return 
				}
	    	indexTemplate = indexTemplate.replace(/<%name%>/gi, name);
				let indexTemplatePath = process.cwd() + '/src/scripts/chunk/' + name + '/Index.js';
				fs.writeFileSync(indexTemplatePath, indexTemplate);
			})
			// if(parentName){
			// 	routerTemplate = routerTemplate.replace(/<%parent%>/gi, parentName + '/');	
			// }else{
			// 	routerTemplate = routerTemplate.replace(/<%parent%>/gi, '');
			// }
			routerTemplate = routerTemplate.replace(/<%name%>/gi, name);
			let routerTemplatePath = process.cwd() + '/src/scripts/routes/' + name + '.js';
			fs.writeFileSync(routerTemplatePath, routerTemplate);
			modelTemplate = modelTemplate.replace(/<%name%>/gi, name);
			let modelTemplatePath = process.cwd() + '/src/scripts/models/' + name + '.js';
			fs.writeFileSync(modelTemplatePath, modelTemplate);
			servicesTemplate = servicesTemplate.replace(/<%name%>/gi, name);
			let servicesTemplatePath = process.cwd() + '/src/scripts/services/' + name + '.js';
			fs.writeFileSync(servicesTemplatePath, servicesTemplate);
			console.log();
			console.log(chalk.yellow('# 模块初始化成功!'));
			console.log();
			console.log('# ========================');
			console.log();
			console.log(chalk.yellow('  请在' + (parentName ? parentName : '根') + '路由中动态引入路由文件吧'));
			console.log();
			console.log(chalk.yellow('  getChildRoutes(partialNextState, cb) {\n    require.ensure([], (require) => {\n      cb(null, [\n        require("./' +(parentName?'':'routes/')+ name + '")\n      ])\n\    })\n  }'));
			console.log();
			console.log('# ========================');
			console.log();
		}
	});
}
let name = program.args[0] || '';
if(name.length!=0){
	inquirer.prompt(project)
		.then((answers) => {
			let parentName = ''
			if(answers['parent'] && answers['parent'].length!=0){
				parentName = answers['parent']
				fs.exists(process.cwd() + '/src/scripts/routes/' + answers['parent'] + '.js', function (exists) {
					if(!exists){
						console.log();
						console.log(chalk.red('# ***********************'));
						console.log();
						console.log(chalk.red('  ERROR：父模块不存在!'));
						console.log();
						console.log(chalk.red('# ***********************'));
						console.log();
						return 
					}else{
						create(name, parentName)
					}
				});
			}else{
				create(name,'')
			}
		})
}else{
	console.log(chalk.red('# ***********************'));
	console.log();
	console.log(chalk.red('  ERROR：请使用以下命令初始化模块!'));
	console.log();
	console.log(chalk.red('  jw-client module xxxx'));
	console.log();
	console.log(chalk.red('# ***********************'));
	console.log();
}

